# Property Management Smart Contract Documentation

## Overview
This canister manages property listings, transactions, reviews, and reservations for a decentralized vacation rental platform on the Internet Computer.

## Functions

### Property Management

#### registerProperty
Registers a new property with a unique ID and adds it to the system.
- Params: `unreg: UnregisteredProperty` - An UnregisteredProperty object with all property details
- Returns: `async Text` - The generated property ID or empty string on validation failure

#### updateProperty
Updates an existing property with new details.
- Params: `updatedProp: Property` - A Property object with modified fields
- Returns: `async Int` - 1 on success, 0 on failure

#### removeProperty
Deletes a property from the system.
- Params: `propId: Text` - The ID of the property to remove
- Returns: `async Int` - 1 on success, 0 on failure

#### getPropertyInfo
Retrieves detailed information about a specific property.
- Params: `propertyId: Text` - The ID of the property to retrieve
- Returns: `async ?Property` - Optional property details (null if not found)

#### getAllProperties
Gets a list of all registered properties in the system.
- Returns: `async [Property]` - Array of all properties

#### getProperties
Retrieves a limited number of properties.
- Params: `count: Nat` - Maximum number of properties to return
- Returns: `async [Property]` - Array of properties up to the specified count

#### getOwnerProperties
Gets all properties owned by a specific user.
- Params: `ownerId: Principal` - The Principal ID of the property owner
- Returns: `async [Property]` - Array of properties owned by the specified user

#### propertyCount
Returns the total number of registered properties.
- Returns: `async Nat` - Count of properties in the system

#### updatePropertyStatus
Changes the status of a property (e.g., available, booked, maintenance).
- Params:
    - `propId: Text` - The ID of the property to update
    - `status: Text` - The new status to set
- Returns: `async Nat` - 1 on success, 0 on failure or invalid status

#### checkPropertyAvailability
Checks if a property is currently available for booking.
- Params: `propId: Text` - The ID of the property to check
- Returns: `async Bool` - True if property is available, false otherwise

#### getPropertyIdFromTextAttribute
Searches for properties by text attributes and returns matching property IDs.
- Params:
    - `attribute: Text` - The property attribute to search by (owner, name, status, etc.)
    - `text_query: Text` - The search text to match
- Returns: `async [Text]` - Array of property IDs matching the search criteria

#### getPropIdFromNatAttribute
Searches for properties by numeric attributes and returns matching property IDs.
- Params:
    - `attribute: Text` - The property attribute to search by (price, bedrooms, etc.)
    - `order: Text` - Sorting order (not used in filtering)
    - `comparison: Text` - Comparison operator ("mt", "eq", or "lt")
    - `numQuery: Float` - The numeric value to compare against
- Returns: `async [Text]` - Array of property IDs matching the search criteria

#### getPropertyPaginate
Retrieves a paginated list of properties based on various filtering and sorting criteria.
- Params: `queries: PaginationQuery` - A PaginationQuery object containing all search parameters
- Returns: `async ([Property], Nat)` - Tuple containing array of properties and total count

#### getProperty
Gets property details for a list of property IDs.
- Params: `propIds: [Text]` - Array of property IDs to retrieve
- Returns: `async [Property]` - Array of property objects for the specified IDs

### Review Management

#### addReview
Adds a review for a property and updates its average rating.
- Params:
    - `newPropertyId: Text` - The ID of the property being reviewed
    - `newReviewer: Principal` - Principal ID of the reviewer
    - `newReviewerName: Text` - Name of the reviewer
    - `newReviewerPP: Text` - Profile picture URL of reviewer
    - `newRating: Float` - Rating value (typically 0-5)
    - `newReviewText: Text` - Text content of the review
    - `newReviewDate: Text` - Date string when review was created
- Returns: `async Text` - The generated review ID or error message on failure

#### getAllPropertyReviews
Retrieves all reviews for a specific property.
- Params: `propertyId: Text` - The ID of the property
- Returns: `async [PropertyReview]` - Array of reviews for the property

### Transaction Management

#### initiateTransaction
Creates a new transaction for property booking with a unique ID.
- Params: `newTransaction: UnregisteredTransaction` - An UnregisteredTransaction object without an ID
- Returns: `async Text` - The generated transaction ID or empty string on failure

#### updateTransaction
Updates an existing transaction with new details.
- Params: `updatedTransaction: Transaction` - A Transaction object with modified fields
- Returns: `async Int` - 1 on success, 0 on failure

#### changeTransactionStatus
Modifies the status of an existing transaction.
- Params:
    - `transactionId: Text` - The ID of the transaction to update
    - `newStatus: Text` - The new status to set
- Returns: `async Int` - 1 on success, 0 on failure

#### removeTransaction
Deletes a transaction from the system.
- Params: `transactionId: Text` - The ID of the transaction to remove
- Returns: `async Int` - 1 on success, 0 on failure

#### getTransactionStatus
Retrieves the current status of a transaction.
- Params: `transactionId: Text` - The ID of the transaction
- Returns: `async Text` - The status of the transaction or empty string if not found

#### getTransactionByStatus
Returns all transactions matching a specified status.
- Params: `status: Text` - The transaction status to filter by
- Returns: `async [Transaction]` - Array of transactions with the specified status

#### getUserUncompletedTransactions
Gets all active (non-completed, non-cancelled) transactions for a specific user.
- Params: `userId: Principal` - The Principal ID of the user
- Returns: `async [Transaction]` - Array of active transactions for the user

#### getUserTransactionHistoryPaginate
Gets a paginated list of transactions for a specific user, optionally filtered by status.
- Params:
    - `userId: Principal` - The Principal ID of the user
    - `status: ?Text` - Optional status filter
    - `page: Nat` - Page number (starting from 1)
    - `count: Nat` - Number of items per page
- Returns: `async ([Transaction], Nat)` - Tuple of transactions array and total count

#### getPropertyTransactionHistory
Retrieves all transactions related to a specific property.
- Params: `propertyId: Text` - The ID of the property
- Returns: `async [Transaction]` - Array of transactions for the property

#### getTransaction
Gets the details of a specific transaction.
- Params: `transactionId: Text` - The ID of the transaction
- Returns: `async ?Transaction` - Optional transaction details (null if not found)
