# Property Management Smart Contract

This canister manages property listings, transactions, reviews, and reservations for a decentralized vacation rental platform on the Internet Computer.

## PROPERTY MANAGEMENT

registerProperty:
Registers a new property with a unique ID and adds it to the system.
@param unreg - An UnregisteredProperty object with all property details
@return Text - The generated property ID or empty string on validation failure

updateProperty:
Updates an existing property with new details.
@param updatedProp - A Property object with modified fields
@return Int - 1 on success, 0 on failure

removeProperty:
Deletes a property from the system.
@param propId - The ID of the property to remove
@return Int - 1 on success, 0 on failure

getPropertyInfo:
Retrieves detailed information about a specific property.
@param propertyId - The ID of the property to retrieve
@return ?Property - Optional property details (null if not found)

getAllProperties:
Gets a list of all registered properties in the system.
@return [Property] - Array of all properties

getProperties:
Retrieves a limited number of properties.
@param count - Maximum number of properties to return
@return [Property] - Array of properties up to the specified count

getOwnerProperties:
Gets all properties owned by a specific user.
@param ownerId - The Principal ID of the property owner
@return [Property] - Array of properties owned by the specified user

propertyCount:
Returns the total number of registered properties.
@return Nat - Count of properties in the system

updatePropertyStatus:
Changes the status of a property (e.g., available, booked, maintenance).
@param propId - The ID of the property to update
@param status - The new status to set
@return Nat - 1 on success, 0 on failure or invalid status

checkPropertyAvailability:
Checks if a property is currently available for booking.
@param propId - The ID of the property to check
@return Bool - True if property is available, false otherwise

getPropertyIdFromTextAttribute:
Searches for properties by text attributes and returns matching property IDs.
@param attribute - The property attribute to search by (owner, name, status, etc.)
@param text_query - The search text to match
@return [Text] - Array of property IDs matching the search criteria

getPropIdFromNatAttribute:
Searches for properties by numeric attributes and returns matching property IDs.
@param attribute - The property attribute to search by (price, bedrooms, etc.)
@param order - Sorting order (not used in filtering)
@param comparison - Comparison operator ("mt", "eq", or "lt")
@param numQuery - The numeric value to compare against
@return [Text] - Array of property IDs matching the search criteria

getPropertyPaginate:
Retrieves a paginated list of properties based on various filtering and sorting criteria.
@param queries - A PaginationQuery object containing all search parameters
@return ([Property], Nat) - Tuple containing array of properties and total count

getProperty:
Gets property details for a list of property IDs.
@param propIds - Array of property IDs to retrieve
@return [Property] - Array of property objects for the specified IDs

## REVIEW MANAGEMENT

addReview:
Adds a review for a property and updates its average rating.
@param newPropertyId - The ID of the property being reviewed
@param newReviewer - Principal ID of the reviewer
@param newReviewerName - Name of the reviewer
@param newReviewerPP - Profile picture URL of reviewer
@param newRating - Rating value (typically 0-5)
@param newReviewText - Text content of the review
@param newReviewDate - Date string when review was created
@return Text - The generated review ID or error message on failure

getAllPropertyReviews:
Retrieves all reviews for a specific property.
@param propertyId - The ID of the property
@return [PropertyReview] - Array of reviews for the property

## TRANSACTION MANAGEMENT

initiateTransaction:
Creates a new transaction for property booking with a unique ID.
@param newTransaction - An UnregisteredTransaction object without an ID
@return Text - The generated transaction ID or empty string on failure

updateTransaction:
Updates an existing transaction with new details.
@param updatedTransaction - A Transaction object with modified fields
@return Int - 1 on success, 0 on failure

changeTransactionStatus:
Modifies the status of an existing transaction.
@param transactionId - The ID of the transaction to update
@param newStatus - The new status to set
@return Int - 1 on success, 0 on failure

removeTransaction:
Deletes a transaction from the system.
@param transactionId - The ID of the transaction to remove
@return Int - 1 on success, 0 on failure

getTransactionStatus:
Retrieves the current status of a transaction.
@param transactionId - The ID of the transaction
@return Text - The status of the transaction or empty string if not found

getTransactionByStatus:
Returns all transactions matching a specified status.
@param status - The transaction status to filter by
@return [Transaction] - Array of transactions with the specified status

getUserUncompletedTransactions:
Gets all active (non-completed, non-cancelled) transactions for a specific user.
@param userId - The Principal ID of the user
@return [Transaction] - Array of active transactions for the user

getUserTransactionHistoryPaginate:
Gets a paginated list of transactions for a specific user, optionally filtered by status.
@param userId - The Principal ID of the user
@param status - Optional status filter
@param page - Page number (starting from 1)
@param count - Number of items per page
@return ([Transaction], Nat) - Tuple of transactions array and total count

getPropertyTransactionHistory:
Retrieves all transactions related to a specific property.
@param propertyId - The ID of the property
@return [Transaction] - Array of transactions for the property

getTransaction:
Gets the details of a specific transaction.
@param transactionId - The ID of the transaction
@return ?Transaction - Optional transaction details (null if not found)
/**
 * Property Management Smart Contract
 * 
 * This canister manages property listings, transactions, reviews, and reservations
 * for a decentralized vacation rental platform on the Internet Computer.
 * 
 * PROPERTY MANAGEMENT:
 * 
 * registerProperty: 
 * Registers a new property with a unique ID and adds it to the system.
 * @param unreg - An UnregisteredProperty object with all property details
 * @return Text - The generated property ID or empty string on validation failure
 * 
 * updateProperty:
 * Updates an existing property with new details.
 * @param updatedProp - A Property object with modified fields
 * @return Int - 1 on success, 0 on failure
 * 
 * removeProperty:
 * Deletes