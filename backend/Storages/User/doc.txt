# User Module Documentation

## Functions

### registerUser
Registers a new user profile in the system.
- Params: `prof: UserProfile` - The user profile to register
- Returns: `async Nat` - Returns 1 if registration was successful, 0 otherwise

### updateUser
Updates an existing user profile in the system.
- Params: `prof: UserProfile` - The updated user profile
- Returns: `async Nat` - Returns 1 if update was successful, 0 otherwise

### getUser
Retrieves a user profile by principal ID.
- Params: `id: Principal` - The principal ID of the user
- Returns: `async ?UserProfile` - The user profile if found, null otherwise

### getAllUser
Retrieves a specified number of user profiles.
- Params: `count: Nat` - Maximum number of profiles to retrieve
- Returns: `async [UserProfile]` - Array of user profiles up to the specified count

### getUserBalance
Gets the balance of a specific user.
- Params: `id: Principal` - The principal ID of the user
- Returns: `async Float` - The user's balance, or 0 if user not found

### getUserWalletId
Retrieves the wallet ID associated with a user.
- Params: `id: Principal` - The principal ID of the user
- Returns: `async ?Principal` - The user's wallet ID if found, null otherwise

### isAdmin
Checks if a user has admin role.
- Params: `id: Principal` - The principal ID of the user
- Returns: `async Bool` - True if the user is an admin, false otherwise

### isOwner
Checks if a user has owner role.
- Params: `id: Principal` - The principal ID of the user
- Returns: `async Bool` - True if the user is an owner, false otherwise

### isRenter
Checks if a user has renter role.
- Params: `id: Principal` - The principal ID of the user
- Returns: `async Bool` - True if the user is a renter, false otherwise

### getRole
Gets the role of a specific user.
- Params: `id: Principal` - The principal ID of the user
- Returns: `async Text` - The user's role, or "User not found" if user doesn't exist

### updateUserBalance
Updates a user's balance.
- Params: 
    - `id: Principal` - The principal ID of the user
    - `newBalance: Float` - The new balance value
- Returns: `async Nat` - Returns 1 if update was successful, 0 otherwise

### registerNewPropertyToUser
Registers a new property and associates it with a user.
- Params: 
    - `userId: Principal` - The principal ID of the user
    - `property: Util.UnregisteredProperty` - The property details to register
- Returns: `async Nat` - Returns 1 if registration was successful, 0 otherwise

### transferPropertyToUser
Transfers ownership of a property to a user.
- Params: 
    - `userId: Principal` - The principal ID of the user receiving the property
    - `propertyId: Text` - The ID of the property to transfer
- Returns: `async Nat` - Returns 1 if transfer was successful, 0 otherwise

### removePropertyFromUser
Removes a property association from a user and marks the property as unavailable.
- Params: 
    - `userId: Principal` - The principal ID of the user
    - `propertyId: Text` - The ID of the property to remove
- Returns: `async Nat` - Returns 1 if removal was successful, 0 otherwise

### deletePropertyFromUser
Deletes a property and removes its association from a user.
- Params: 
    - `userId: Principal` - The principal ID of the user
    - `propertyId: Text` - The ID of the property to delete
- Returns: `async Nat` - Returns 1 if deletion was successful, 0 otherwise

### getUserProperties
Retrieves all properties associated with a specific user.
- Params: `userId: Principal` - The principal ID of the user
- Returns: `async [Property.Property]` - Array of properties owned by the user

### getUserIdFromTextAttribute
Searches for user IDs based on a text attribute matching a query.
- Params: 
    - `attribute: Text` - The attribute to search (id, fullName, role, email, dateOfBirth, profilePictureUrl)
    - `text_query: Text` - The search query
- Returns: `async [Principal]` - Array of matching user IDs

### getUserIdFromNatAttribute
Searches for user IDs based on a numeric attribute comparison.
- Params: 
    - `attribute: Text` - The attribute to search (currently only supports "balance")
    - `comparison: Text` - The comparison operator ("mt" for >=, "eq" for =, "lt" for <=)
    - `numQuery: Float` - The numeric value to compare against
- Returns: `async [Principal]` - Array of matching user IDs

### getUserFromRole
Retrieves users with a specific role.
- Params: 
    - `roleQuery: Text` - The role to search for (admin, owner, renter, guest)
    - `count: Nat` - Maximum number of users to retrieve
- Returns: `async [UserProfile]` - Array of user profiles with the specified role

### getUserPaginate
Retrieves a paginated list of user profiles based on various filtering and sorting criteria.
- Params: `queries: Util.PaginationQuery` - Object containing all query parameters
- Returns: `async ([UserProfile], Nat)` - Tuple of matching user profiles and result count

### getUsers
Retrieves multiple user profiles by their IDs.
- Params: `userIds: [Principal]` - Array of principal IDs to retrieve
- Returns: `async [UserProfile]` - Array of corresponding user profiles (excludes non-existent users)
